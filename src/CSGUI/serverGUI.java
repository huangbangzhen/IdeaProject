package CSGUI;

import com.intellij.uiDesigner.core.GridConstraints;
import com.intellij.uiDesigner.core.GridLayoutManager;
import services.Info;

import javax.swing.*;
import java.awt.*;
import java.awt.event.MouseAdapter;
import java.awt.event.MouseEvent;
import java.io.BufferedInputStream;
import java.io.IOException;
import java.io.ObjectInputStream;
import java.io.ObjectOutputStream;
import java.net.InetAddress;
import java.net.ServerSocket;
import java.net.Socket;
import java.net.UnknownHostException;
import java.util.ArrayList;

/**
 * Created by Administrator on 2017/4/28/028.
 */
public class serverGUI {
    public static void main(String[] args) {
        JFrame frame = new JFrame("serverGUI");
        frame.setContentPane(new serverGUI().server);
        frame.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);
        frame.pack();
        frame.setVisible(true);
    }

    private JPanel server;
    private JTextArea isconnect;
    private JButton startButton;

    public serverGUI() {
        startButton.addMouseListener(new MouseAdapter() {
            @Override
            public void mouseClicked(MouseEvent e) {
                isconnect.append("server start");
                InetAddress inetAddress = null;
                try {
                    inetAddress = InetAddress.getLocalHost();
                } catch (UnknownHostException e1) {
                    e1.printStackTrace();
                }
                isconnect.append("\n" + String.valueOf(inetAddress));
                try {
                    invoke();
                } catch (IOException e1) {
                    e1.printStackTrace();
                }

            }
        });
    }

    private void invoke() throws IOException {
        new Thread(new Runnable() {
            public void run() {
                ServerSocket server = null;
                try {
                    server = new ServerSocket(12345);
                } catch (IOException e) {
                    e.printStackTrace();
                }
                ObjectInputStream is = null;
                ObjectOutputStream os = null;
                try {

                    while (true) {
                        Socket socket = server.accept();
                        isconnect.append("\nOne person was connected...");
                        is = new ObjectInputStream(new BufferedInputStream(socket.getInputStream()));
                        os = new ObjectOutputStream(socket.getOutputStream());
                        ArrayList infomation = new Info().getinfo();
                        os.writeObject(infomation);
                        os.flush();
                        is.close();
                        os.close();
                        socket.close();
                    }
                } catch (IOException e) {
                    e.printStackTrace();
                }
            }
        }).start();
    }

    {
// GUI initializer generated by IntelliJ IDEA GUI Designer
// >>> IMPORTANT!! <<<
// DO NOT EDIT OR ADD ANY CODE HERE!
        $$$setupUI$$$();
    }

    /**
     * Method generated by IntelliJ IDEA GUI Designer
     * >>> IMPORTANT!! <<<
     * DO NOT edit this method OR call it in your code!
     *
     * @noinspection ALL
     */
    private void $$$setupUI$$$() {
        server = new JPanel();
        server.setLayout(new GridLayoutManager(1, 2, new Insets(0, 0, 0, 0), -1, -1));
        server.setMinimumSize(new Dimension(500, 500));
        server.setPreferredSize(new Dimension(280, 250));
        server.setBorder(BorderFactory.createTitledBorder("server"));
        startButton = new JButton();
        startButton.setText("start");
        server.add(startButton, new GridConstraints(0, 1, 1, 1, GridConstraints.ANCHOR_CENTER, GridConstraints.FILL_HORIZONTAL, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW, GridConstraints.SIZEPOLICY_FIXED, null, null, null, 0, false));
        final JScrollPane scrollPane1 = new JScrollPane();
        server.add(scrollPane1, new GridConstraints(0, 0, 1, 1, GridConstraints.ANCHOR_CENTER, GridConstraints.FILL_BOTH, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_WANT_GROW, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_WANT_GROW, null, null, null, 0, false));
        isconnect = new JTextArea();
        isconnect.setLineWrap(true);
        isconnect.setMinimumSize(new Dimension(426, 450));
        isconnect.setPreferredSize(new Dimension(300, 150));
        scrollPane1.setViewportView(isconnect);
    }

    /**
     * @noinspection ALL
     */
    public JComponent $$$getRootComponent$$$() {
        return server;
    }
}
